console.log("📦 Provider Integrations Handler script loaded");class ProviderIntegrationsHandler{constructor(){this.providers=[],this.tableContainer=null,this.statusCards=null,this.initialized=!1}init(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.setup()):this.setup()}setup(){if(console.log("🚀 Initializing Provider Integrations Handler..."),this.tableContainer=document.querySelector(".comparison-table tbody"),this.statusCards=document.querySelectorAll(".grid.grid-3 .card"),console.log("🎯 Table container found:",!!this.tableContainer),console.log("🎯 Status cards found:",this.statusCards.length),!this.tableContainer)return console.error("❌ Could not find comparison table tbody"),console.error("🔍 Available tables:",document.querySelectorAll("table").length),void console.error("🔍 Available tbody elements:",document.querySelectorAll("tbody").length);this.loadData()}async loadData(){try{console.log("🔍 Attempting to fetch provider-integrations.json...");const t=await fetch("CMS/provider-integrations.json",{method:"HEAD"});console.log("🔍 File exists check:",t.status);const e=await fetch("CMS/provider-integrations.json");if(console.log("📡 Response status:",e.status,e.statusText),!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const s=await e.json();console.log("📊 Loaded provider data:",s),this.providers=this.transformProviderData(s),console.log("📋 Transformed providers:",this.providers.length,"providers"),console.log("📋 First provider:",this.providers[0]),this.renderTable(),this.renderStatusCards()}catch(t){console.error("❌ Failed to load provider data:",t),console.error("📍 Error details:",{message:t.message,stack:t.stack}),this.tableContainer&&(this.tableContainer.innerHTML=`\n                    <tr>\n                        <td colspan="7" style="text-align: center; padding: 2rem; color: var(--text-muted);">\n                            <p>Failed to load provider data.</p>\n                            <p style="font-size: 0.8rem; margin-top: 1rem;">Error: ${t.message}</p>\n                            <p style="font-size: 0.8rem;">Please check the browser console for details.</p>\n                        </td>\n                    </tr>\n                `)}}transformProviderData(t){const e=[],s=t.ELEMENTO_SUPPORTED_PROVIDERS;for(const[t,r]of Object.entries(s)){const t={provider:r.display_name,status:r.status,vmManagement:"na",storageAas:"na",networking:"na",k8s:"na",costApi:"na"};r.services.forEach(e=>{switch(e.name){case"vmManagement":t.vmManagement=e.support_level;break;case"STaaS":t.storageAas=e.support_level;break;case"networking":t.networking=e.support_level;break;case"k8s":t.k8s=e.support_level;break;case"costApi":t.costApi=e.support_level}}),e.push(t)}return e}renderTable(){if(!this.tableContainer)return;console.log("📊 Providers in JSON order:",this.providers.map(t=>`${t.provider} (${t.status})`));const t=this.providers.map((t,e)=>`\n                <tr class="${e%2==0?"comparison-table-row-alt":"comparison-table-row"}">\n                    <td class="comparison-table-cell"><strong>${t.provider}</strong></td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.vmManagement)}">${this.getStatusIcon(t.vmManagement)} ${this.getStatusText(t.vmManagement)}</td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.storageAas)}">${this.getStatusIcon(t.storageAas)} ${this.getStatusText(t.storageAas)}</td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.networking)}">${this.getStatusIcon(t.networking)} ${this.getStatusText(t.networking)}</td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.k8s)}">${this.getStatusIcon(t.k8s)} ${this.getStatusText(t.k8s)}</td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.costApi)}">${this.getStatusIcon(t.costApi)} ${this.getStatusText(t.costApi)}</td>\n                    <td class="comparison-table-cell-${this.getStatusClass(t.status)}">${this.getStatusBadge(t.status)}</td>\n                </tr>\n            `).join("");this.tableContainer.innerHTML=t,console.log("✅ Provider table rendered successfully")}renderStatusCards(){if(!this.statusCards||this.statusCards.length<3)return;const t=this.groupProvidersByStatus();if(this.statusCards[0]){const e=t.production||[];this.statusCards[0].querySelector("p").textContent=e.join(", ")}if(this.statusCards[1]){const e=[...t.beta||[],...t.soon||[]];this.statusCards[1].querySelector("p").textContent=e.join(", ")}if(this.statusCards[2]){const e=t.development||[];this.statusCards[2].querySelector("p").textContent=e.join(", ")}console.log("✅ Status cards updated successfully")}groupProvidersByStatus(){const t={};return this.providers.forEach(e=>{const s=e.status;t[s]||(t[s]=[]),t[s].push(e.provider)}),t}getStatusClass(t){return{full:"success",partial:"warning",planned:"error",na:"error",production:"success",beta:"warning",soon:"success",development:"error"}[t]||"error"}getStatusIcon(t){return{full:'<i class="fas fa-check" style="color: var(--green);"></i>',partial:'<i class="fas fa-clock" style="color: var(--yellow);"></i>',planned:'<i class="fas fa-calendar-days" style="color: var(--red);"></i>',na:'<i class="fas fa-minus" style="color: var(--text-muted);"></i>',production:'<i class="fas fa-check" style="color: var(--green);"></i>',beta:'<i class="fas fa-clock" style="color: var(--yellow);"></i>',soon:'<i class="fas fa-check" style="color: var(--green);"></i>',development:'<i class="fas fa-times" style="color: var(--red);"></i>'}[t]||'<i class="fas fa-times" style="color: var(--red);"></i>'}getStatusText(t){return{full:"Full",partial:"Ongoing",planned:"Planned",na:" ",production:"Production",beta:"Beta",soon:"Soon!",development:"Development"}[t]||"Planned"}getStatusBadge(t){return{production:'<span style="background: var(--green); color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.8rem;">Production</span>',beta:'<span style="background: var(--yellow); color: black; padding: 2px 8px; border-radius: 4px; font-size: 0.8rem;">Beta</span>',soon:'<span style="background: var(--purple); color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.8rem;">Soon!</span>',development:'<span style="background: var(--red); color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.8rem;">Development</span>'}[t]||'<span style="background: var(--red); color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.8rem;">Development</span>'}sortProvidersByStatus(t){const e={production:1,soon:2,beta:3,development:4};return[...t].sort((t,s)=>{const r=e[t.status]||999,o=e[s.status]||999;return r===o?t.provider.localeCompare(s.provider):r-o})}showError(){this.tableContainer&&(this.tableContainer.innerHTML='\n                <tr>\n                    <td colspan="7" style="text-align: center; padding: 2rem; color: var(--text-muted);">\n                        <p>Failed to load provider data. Please check the data files.</p>\n                    </td>\n                </tr>\n            ')}updateData(t){this.providers=t,this.renderTable(),this.renderStatusCards()}async loadFromURL(t){try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const s=await e.json();this.providers=this.transformProviderData(s),this.renderTable(),this.renderStatusCards(),console.log("✅ Data loaded from external source:",t)}catch(t){console.error("❌ Failed to load data from URL:",t),this.showError()}}}console.log("🔄 Setting up Provider Integrations Handler initialization..."),"loading"===document.readyState?(console.log("⏳ DOM still loading, adding event listener..."),document.addEventListener("DOMContentLoaded",()=>{console.log("✅ DOM loaded, initializing Provider Integrations Handler..."),window.providerIntegrationsHandler=new ProviderIntegrationsHandler,window.providerIntegrationsHandler.init()})):(console.log("✅ DOM already loaded, initializing Provider Integrations Handler immediately..."),window.providerIntegrationsHandler=new ProviderIntegrationsHandler,window.providerIntegrationsHandler.init()),window.ProviderIntegrationsHandler=ProviderIntegrationsHandler;